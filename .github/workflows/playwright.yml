name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Nightly regression run at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Optional note for manually-triggered regression run'
        required: false

jobs:
  test:
    name: "Test ${{ matrix.project }} (Shard ${{ matrix.shard }})"
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Split tests across multiple shards for parallel execution
        shard: [1/4, 2/4, 3/4, 4/4]
        project: [chromium, firefox, webkit]
        include:
          - shard: 1/4
            shard_name: "1-4"
          - shard: 2/4
            shard_name: "2-4"
          - shard: 3/4
            shard_name: "3-4"
          - shard: 4/4
            shard_name: "4-4"

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps ${{ matrix.project }}

    - name: Run Playwright tests
      run: npx playwright test --project=${{ matrix.project }} --shard=${{ matrix.shard }}
      env:
        CI: true
        BASE_URL: ${{ vars.BASE_URL }}
        API_URL: ${{ vars.API_URL }}
        HEADLESS: ${{ vars.HEADLESS }}
        SLOW_MO: ${{ vars.SLOW_MO }}
        WORKERS: ${{ vars.WORKERS }}
        RETRIES: ${{ vars.RETRIES }}
        TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
        TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
        TEST_FIRST_NAME: ${{ vars.TEST_FIRST_NAME }}
        TEST_LAST_NAME: ${{ vars.TEST_LAST_NAME }}
        ENABLE_FAKER_SEED: ${{ vars.ENABLE_FAKER_SEED }}
        FAKER_SEED: ${{ vars.FAKER_SEED }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.project }}-shard-${{ matrix.shard_name }}
        path: |
          test-results/
          blob-report/
        retention-days: 30

  # Merge all test results and generate combined report
  merge-reports:
    name: "Merge Test Reports"
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts

    - name: Merge test results
      run: |
        # Create merged results directory
        mkdir -p merged-results
        mkdir -p blob-reports

        # Copy all test results to merged directory
        find all-artifacts -name "*.json" -path "*/test-results/*" -exec cp {} merged-results/ \;
        find all-artifacts -name "*.xml" -path "*/test-results/*" -exec cp {} merged-results/ \;

        # Copy all blob reports to a single directory for merging
        find all-artifacts -path "*/blob-report/*" -type f -exec cp {} blob-reports/ \;

        # Generate merged HTML report from blob reports
        if [ "$(ls -A blob-reports)" ]; then
          npx playwright merge-reports --reporter html blob-reports
        else
          echo "No blob reports found, skipping merge"
        fi

    - name: Upload merged report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: final-test-report
        path: |
          playwright-report/
          merged-results/
        retention-days: 30

    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          // Read test results summary
          let summary = 'Playwright Test Results:\n\n';

          try {
            // Check for any test result files
            const resultsDir = 'merged-results';
            if (fs.existsSync(resultsDir)) {
              const files = fs.readdirSync(resultsDir);
              const jsonFiles = files.filter(f => f.endsWith('.json'));

              if (jsonFiles.length > 0) {
                summary += `✅ Tests completed across all shards and browsers\n`;
                summary += `📊 View detailed report in the Actions artifacts\n`;
              }
            }
          } catch (error) {
            summary += `⚠️ Could not read test results: ${error.message}\n`;
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
